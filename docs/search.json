[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Hayley Lenamon",
    "section": "",
    "text": "Hi, I’m Hayley and I’m a student in Washington, DC."
  },
  {
    "objectID": "index.html#education",
    "href": "index.html#education",
    "title": "Hayley Lenamon",
    "section": "Education",
    "text": "Education\nThe George Washington University\nB.A. International Affairs, Journalism & Mass Communication"
  },
  {
    "objectID": "index.html#skills",
    "href": "index.html#skills",
    "title": "Hayley Lenamon",
    "section": "Skills",
    "text": "Skills\nCritical Thinking\nStrong Research/Writing\nPublic Speaking\nCustomer Service\nSpanish (Working Proficiency)"
  },
  {
    "objectID": "walkthrough.html",
    "href": "walkthrough.html",
    "title": "Analysis Walkthrough",
    "section": "",
    "text": "Functions\nI first created a function that returns the sum of 2 numbers.\n\n\nCode\nsum_function <- function(number_one, number_two){sum <- number_one + number_two\nreturn(sum)}\nsum_function(15,9384)\n\n\n[1] 9399\n\n\nNext, I created a function that returns the mean of a list of numbers fed to it.\n\n\nCode\nlist_mean <- c(12,53,62,28,16)\nresultmean <- mean(list_mean)\nprint(resultmean)\n\n\n[1] 34.2\n\n\nNow, I expanded on the function above and instead of just returning the mean number alone, it returns the sentence: “The mean is ___“. (Where the blank is the mean.)\n\n\nCode\nlist_mean <- c(12,53,62,28,16)\n\nresult_mean_print <- function(list_mean){\n  output <- paste0(\"The mean is \", mean(list_mean), \".\") \n  return(output)}\n\nresult_mean_print(list_mean)\n\n\n[1] \"The mean is 34.2.\"\n\n\nFor the next two questions, I use the flights dataset from the package nycflights13. It contains records of individual airline flights departing at New York’s three metro airports, JFK, LaGuardia (LGA) and Newark (EWR). Run the following chunk to load the data.\n\n\nCode\n#load the data to use for the rest of the assignment questions\nflights <- nycflights13::flights\nhead(flights)\n\n\n# A tibble: 6 × 19\n   year month   day dep_time sched_dep…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n  <int> <int> <int>    <int>       <int>   <dbl>   <int>   <int>   <dbl> <chr>  \n1  2013     1     1      517         515       2     830     819      11 UA     \n2  2013     1     1      533         529       4     850     830      20 UA     \n3  2013     1     1      542         540       2     923     850      33 AA     \n4  2013     1     1      544         545      -1    1004    1022     -18 B6     \n5  2013     1     1      554         600      -6     812     837     -25 DL     \n6  2013     1     1      554         558      -4     740     728      12 UA     \n# … with 9 more variables: flight <int>, tailnum <chr>, origin <chr>,\n#   dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>, minute <dbl>,\n#   time_hour <dttm>, and abbreviated variable names ¹​sched_dep_time,\n#   ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay\n\n\n\nUsing the flights dataset, I created a function that filters the data frame to only include records from a single originating airport (column name origin).\n\n\n\nCode\nflight_df <- function(origin_name){records <- flights %>%\n  filter(origin == origin_name) \nreturn(records)}\nflight_df(\"JFK\")\n\n\n# A tibble: 111,279 × 19\n    year month   day dep_time sched_de…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n   <int> <int> <int>    <int>      <int>   <dbl>   <int>   <int>   <dbl> <chr>  \n 1  2013     1     1      542        540       2     923     850      33 AA     \n 2  2013     1     1      544        545      -1    1004    1022     -18 B6     \n 3  2013     1     1      557        600      -3     838     846      -8 B6     \n 4  2013     1     1      558        600      -2     849     851      -2 B6     \n 5  2013     1     1      558        600      -2     853     856      -3 B6     \n 6  2013     1     1      558        600      -2     924     917       7 UA     \n 7  2013     1     1      559        559       0     702     706      -4 B6     \n 8  2013     1     1      606        610      -4     837     845      -8 DL     \n 9  2013     1     1      611        600      11     945     931      14 UA     \n10  2013     1     1      613        610       3     925     921       4 B6     \n# … with 111,269 more rows, 9 more variables: flight <int>, tailnum <chr>,\n#   origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>, and abbreviated variable names\n#   ¹​sched_dep_time, ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay\n\n\nSimilarly, using the flights dataset, I created a function that filters the data frame to only include records from a single originating airport (column name origin), and then aggregates (i.e. counts) the results by airline (carrier) to show how many flights each airline has from that airport.\n\n\nCode\nairport_df <- function(origin_name){\n  records <- flights %>%\n    filter(origin == origin_name) %>%\n    group_by(carrier) %>%\n    count(carrier)\n  return(records)}\nairport_df(\"JFK\")\n\n\n# A tibble: 10 × 2\n# Groups:   carrier [10]\n   carrier     n\n   <chr>   <int>\n 1 9E      14651\n 2 AA      13783\n 3 B6      42076\n 4 DL      20701\n 5 EV       1408\n 6 HA        342\n 7 MQ       7193\n 8 UA       4534\n 9 US       2995\n10 VX       3596"
  }
]